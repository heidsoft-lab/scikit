numpy

维度(dimensions)叫做轴(axes),轴的个数叫做秩(rank)

ndarray:numpy的数组类.对象属性有：
ndarray.ndim:数组轴的个数
ndarray.shape:数组的维度
ndarray.size:数组元素的总个数
ndarray.dtype:一个用来描述数组中元素类型的对象
ndarray.itemsize:数组中每个元素的字节大小
ndarray.data:包含数组元素的缓冲区，通常不使用

flat:数组元素的一个迭代器

函数和方法总览：
创建数组：
arange:制定开始值,终值和步长,创建等差数组
array:创建二维数组
identity:创建方阵
linspace:指定开始值、终值和元素个数,创建等差数组
empty:创建数组元素均为空，empty_like
zeros:创建数组元素均为0，zeros_like
ones:创建数组元素均为1，ones_like
logspace:创建等比数列数组
fromfunction:以函数式创建数组
fromfile:以文件式创建数组
eye:生成对角矩阵

转化:
astype,atleast 1d,atleast 2d,atleast 3d,mat

操作:
ravel：将多维数组降为一维数组
vstack:沿着第一个轴进行组合
hstack:沿着第二个轴进行组合
row_stack:以行将一维数组组合成二维数组
transpose:将数组进行转置
split:数组分割(hsplit,vsplit,dsplit)
colum_stack:以列将一维数组组合成二维数组
floor:向下取整
reshape:可以创建一个改变了尺寸的数组，原数组的shape保持不变
>>> a=np.array([1,2,3,4])
>>> b=np.array([5,6,7,8])
>>> c=np.array([[1,2,3,4],[5,6,7,8],[7,8,9,10]])
>>> c
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 7,  8,  9, 10]])
>>> c.shape
(3, 4)
>>> d=a.reshape((2,2))
>>> d
array([[1, 2],
       [3, 4]])
>>> d=a.reshape((1,-1))
>>> d
array([[1, 2, 3, 4]])
>>> d=a.reshape((-1,1))
>>> d
array([[1],
       [2],
       [3],
       [4]])
>>> d=c.reshape((1,-1))
>>> d
array([[ 1,  2,  3,  4,  5,  6,  7,  8,  7,  8,  9, 10]])
>>> d=c.reshape((-1,1))
>>> d
array([[ 1],
       [ 2],
       [ 3],
       [ 4],
       [ 5],
       [ 6],
       [ 7],
       [ 8],
       [ 7],
       [ 8],
       [ 9],
       [10]])

resize,array split,concatenate,diagonal,dstack,item,newaxis,repeat,squeeze,swapaxes,take

询问：
all,any,nonzero,where

排序：
argmax,argmin,argsort,max,min,ptp,searchsorted,sort

运算：
choose,compress,cumprod,cumsum,inner,fill,imag,prod,put,putmask,real,sum

基本统计：
cov,mean,std,var

基本线性代数：
cross,dot,outer,svd,vdot


广播法则：
如果所有的输入数组维度都不相同,一个“1”将被重复的添加在维度较小的数组上直至所有的数组拥有一样的数组维度
输出数组的shape是输入数组shape的各个轴上的最大值
如果输入数组的某个轴和输出数组的对应轴的长度相同或者其长度为1时，这个数组能够用来计算，否则出错，当输入数组的某个轴的长度为1时，沿着此轴运算时都用此轴上的第一组值


索引
1.通过数组索引
>>> a=arange(12)**2
>>> a
array([  0,   1,   4,   9,  16,  25,  36,  49,  64,  81, 100, 121])
>>> i=array([1,1,3,8,5])
>>> a[i]
array([ 1,  1,  9, 64, 25])
>>> j=array([[3,4],[9,7]])
>>> a[j]
array([[ 9, 16],
       [81, 49]])

2.被索引数组是多维时，每一个唯一的索引数列指向第一维
>>> palette=array([[0,0,0],     #黑
...                [255,0,0],   #红
...                [0,255,0],   #绿
...                [0,0,255],   #蓝
...                [255,255,255]]) #白
>>> image=array([[0,1,2,0],      #0指向第0行，1指向第1行，2指向第2行
...              [0,3,4,0]])     #3指向第3行，4指向第4行
>>> palette[image]
array([[[  0,   0,   0],
        [255,   0,   0],
        [  0, 255,   0],
        [  0,   0,   0]],

       [[  0,   0,   0],
        [  0,   0, 255],
        [255, 255, 255],
        [  0,   0,   0]]])

3.不止一维的索引
>>> a=arange(12).reshape(3,4)
>>> a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>> b=arange(11).reshape(3,4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: cannot reshape array of size 11 into shape (3,4)
>>> i=array([[0,1],
...          [1,2]])
>>> j=array([[2,1],
...          [3,3]])
>>> a[i,j]
array([[ 2,  5],   #2--第0行第2列，5--第1行第1列，7--第2行第3列，11--第3行第3列
       [ 7, 11]])
>>> a[i]
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 4,  5,  6,  7],
        [ 8,  9, 10, 11]]])
>>> a[i,0]
array([[0, 4],
       [4, 8]])   #第0列
>>> a[i,1]
array([[1, 5],
       [5, 9]])   #第1列
>>> a[i,2]
array([[ 2,  6],
       [ 6, 10]]) #第2列
>>> a[i,3]
array([[ 3,  7],
       [ 7, 11]]) #第3列
>>> a[j]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: index 3 is out of bounds for axis 0 with size 3
>>> a[j,1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: index 3 is out of bounds for axis 0 with size 3
>>> a[:,j]
array([[[ 2,  1],
        [ 3,  3]],

       [[ 6,  5],
        [ 7,  7]],

       [[10,  9],
        [11, 11]]])
>>> a[1,j]
array([[6, 5],
       [7, 7]])
	   
4.通过布尔数组索引
>>> a=arange(12).reshape(3,4)
>>> a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>> b=array([False,True,True])
>>> c=arrey([True,False,True,True])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'arrey' is not defined
>>> c=array([True,False,True,True])
>>> a[b]
array([[ 4,  5,  6,  7],   #第0行为False,不输出.第1,2行为True,输出
       [ 8,  9, 10, 11]])
>>> a[b,:]
array([[ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>> a[c]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: boolean index did not match indexed array along dimension 0; dimension is 3 but corresponding boolean dimension is 4
>>> a[:,c]
array([[ 0,  2,  3],    #第0,2,3行为True,输出,第1行为False,不输出
       [ 4,  6,  7],
       [ 8, 10, 11]])

ix_()函数:可以为了获得多元组的结果而用来结合不同向量
>>> a=array([2,3,4,5])
>>> b=array([8,5,4])
>>> c=array([5,4,6,8,3])
>>> ax,bx,cx=ix_(a,b,c)
>>> ax
array([[[2]],

       [[3]],

       [[4]],

       [[5]]])
>>> bx
array([[[8],
        [5],
        [4]]])
>>> cx
array([[[5, 4, 6, 8, 3]]])
>>> result=ax+bx*cx
>>> result
array([[[42, 34, 50, 66, 26],
        [27, 22, 32, 42, 17],
        [22, 18, 26, 34, 14]],

       [[43, 35, 51, 67, 27],
        [28, 23, 33, 43, 18],
        [23, 19, 27, 35, 15]],

       [[44, 36, 52, 68, 28],
        [29, 24, 34, 44, 19],
        [24, 20, 28, 36, 16]],

       [[45, 37, 53, 69, 29],
        [30, 25, 35, 45, 20],
        [25, 21, 29, 37, 17]]])



