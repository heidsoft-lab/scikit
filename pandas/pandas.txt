Pandas
Series和DataFrame是pandas的两个主要数据结构
axis：需要合并链接的轴，0是行，1是列，axis=1的时候，行对齐；axis=0的时候，列对齐

Series:一种类似于一位数组的对象，它由一组数据(各种Numpy数据类型)(右)以及一组与之相关的数据标签(即索引)(左)组成
>>> s=pd.Series([1,3,5,np.nan,6,8])
>>> s
0    1.0
1    3.0
2    5.0
3    NaN
4    6.0
5    8.0
dtype: float64
每个Seiies对象实际上都由两个数组组成:
index:它是从Numpy数组继承的Index对象,保存标签信息(左)
values:保存值的Numpy数组(右)

注意三点:
1.Series是一种类似于一维数组(数组:naarray)的对象
2.它的数据类型没有限制(各种Numpy数据类型)
3.它有索引,把索引当做数据的标签(key)看待，类似字典(实际上是数组);同时具有字典和数组的功能，因此也支持一些字典的用法

Series索引:
Series创建后会自动生成索引，默认从0开始,可以指定和修改索引(index(),reindex())
>>> series_4=Series([1,2,'a','b','ad'])
>>> series_4
0     1
1     2
2     a
3     b
4    ad
>>> series_4.index=(['a','b','c','d','e'])
>>> series_4
a     1
b     2
c     a
d     b
e    ad
dtype: object

Series增删改查
增:
Series的add()方法计算不是增加Series元素用的，是加法计算.使用append连接其他Series
>>> series_4.append(series_3)
a     1
b     2
c     a
d     b
e    ad
0     1
1     2
2     3
3     4
4     a
dtype: object
>>> series_4
a     1
b     2
c     a
d     b
e    ad
dtype: object

删:
drop()减少Series元素
>>> series_4.drop('a')
b     2
c     a
d     b
e    ad
dtype: object
>>> series_4
a     1
b     2
c     a
d     b
e    ad
dtype: object

改：
>>> series_4['a']=4
>>> series_4
a     4
b     2
c     a
d     b
e    ad
dtype: object

查:
通过索引查单值:
>>> series_4['a']
4
通过索引序列查多值:
>>> series_4[['a','b']]
a    4
b    2
dtype: object
通过布尔类型索引筛选:
>>> series_4
a     4
b     2
c     a
d     b
e    ad
dtype: object
>>> series_4[series_4>2]
a     4
c     a
d     b
e    ad
dtype: object

通过位置切片和标签切片查询数据:
>>> series_4
a     4
b     2
c     a
d     b
e    ad
dtype: object
>>> series_4[:2]
a    4
b    2
dtype: object
>>> series_4['a':'c']
a    4
b    2
c    a
dtype: object

通过字典创建Series
>>> series_5=Series({'a':1,'b':2,'c':3})
>>> series_5
a    1
b    2
c    3
dtype: int64

DataFrame:Pandas中一个表结构的数据结构,包括三部分信息，表头(列的名称)，表的内容(二维矩阵)，索引(每行一个唯一的标记)

DataFrame的创建
>>> import pandas as pd
>>> df=pd.DataFrame([[1,2,3],[4,5,6]])
>>> df
   0  1  2
0  1  2  3
1  4  5  6
>>> df=DataFrame([[1,2,3],[4,5,6]],index=['row1','row2'],columns=['a1','a2,','a3'])
>>> df
      a1  a2,  a3
row1   1    2   3
row2   4    5   6

>>> import numpy as np
>>> dates=pd.date_range('20170814',periods=6)
>>> df=pd.DataFrame(np.random.randn(6,4),index = dates,columns=list('abcd'))
>>> df
                   a         b         c         d
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-19  1.200998  0.367511  0.495074  0.230626

获取数据的行数；len()
显示数据:
df.head([n]) #获取df中的前n行数据，n不指定，默认为5
df.tail([n]) #获取df中的后n行数据，n不指定，默认为5
>>> df
                   a         b         c         d
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-19  1.200998  0.367511  0.495074  0.230626
>>> df.head()
                   a         b         c         d
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
>>> df.head(2)
                   a         b         c         d
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
2017-08-15  0.082809 -1.094864  0.554352  0.044888
>>> df.tail()
                   a         b         c         d
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-19  1.200998  0.367511  0.495074  0.230626

按照索引排序
newdf=df.sort_index(ascending=False,inplace=True)
ascending=False参数指定按照索引值的降序方式进行排序，默认升序方式
inplace=True指定为True时，表示会对df中的数据进行排序，函数返回none,newdf的值none;默认为False,不会对df中的数据进行修改，返回一个新的df,newdf=排序后的df
>>> df
                   a         b         c         d
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-19  1.200998  0.367511  0.495074  0.230626
>>> newdf=df.sort_index()
>>> newdf
                   a         b         c         d
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-19  1.200998  0.367511  0.495074  0.230626
>>> newdf=df.sort_index(ascending=False)
>>> newdf
                   a         b         c         d
2017-08-19  1.200998  0.367511  0.495074  0.230626
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
>>> df
                   a         b         c         d
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-19  1.200998  0.367511  0.495074  0.230626
>>> newdf=df.sort_index(ascending=False,inplace=True)
>>> newdf
>>> df
                   a         b         c         d
2017-08-19  1.200998  0.367511  0.495074  0.230626
2017-08-18 -1.586650 -1.408190  0.786882  0.656990
2017-08-17 -0.835500 -0.767406 -0.490322 -0.268874
2017-08-16  2.084624 -0.770708  0.812788 -0.036181
2017-08-15  0.082809 -1.094864  0.554352  0.044888
2017-08-14 -0.794163 -1.411123 -0.447972 -1.443843

添加数据:
append方法可以添加数据到一个dataframe中，不会影响原来的dataframe,会返回一个新的dataframe(类似的还有concat,join)
语法:DataFrame.append(otherData,ignore_index=False,verify_integrity=False)
ignore_index默认参数为False,如果为True,会对新生成的dataframe使用新的索引，忽略原来的索引
verify_integrity默认参数是False,如果为True，当ignore_index为False时，会检查添加的数据索引是否冲突，如果冲突，会添加失败
>>> dates=pd.date_range('20170814',periods=10)
>>> df=pd.DataFrame(np.random.randn(10,4),index=dates,columns=list('abcd'))
>>> dates1=pd.date_range('20170814',periods=2)
>>> df1=pd.DataFrame(np.random.randn(2,4),index=dates1,columns=list('abcd'))
>>> df
                   a         b         c         d
2017-08-14 -0.070943 -1.476796  1.866982 -0.318673
2017-08-15 -0.952919  0.141110 -0.774668  0.484142
2017-08-16  0.668221 -0.844105 -0.502913 -2.099352
2017-08-17 -1.219214  0.452031  0.658647 -0.125866
2017-08-18 -0.545331  0.169694  0.440980  0.174810
2017-08-19 -2.675465  0.817242  1.540008 -2.363680
2017-08-20 -2.220453 -1.678332  2.412448  0.767308
2017-08-21  0.201304 -1.383081 -2.705714  0.173396
2017-08-22  0.324152 -1.559648  0.347646 -0.147668
2017-08-23  1.634723  1.012054 -0.620454  0.862024
>>> df1
                   a         b         c         d
2017-08-14  0.876218 -1.956112 -0.222712 -1.589815
2017-08-15 -0.761345 -0.356646 -0.275600  0.667749
>>> df.append(df1)  #df1中的两行数据会添加到df中，且产生的df的各行索引就是原来数据的索引
                   a         b         c         d
2017-08-14 -0.070943 -1.476796  1.866982 -0.318673
2017-08-15 -0.952919  0.141110 -0.774668  0.484142
2017-08-16  0.668221 -0.844105 -0.502913 -2.099352
2017-08-17 -1.219214  0.452031  0.658647 -0.125866
2017-08-18 -0.545331  0.169694  0.440980  0.174810
2017-08-19 -2.675465  0.817242  1.540008 -2.363680
2017-08-20 -2.220453 -1.678332  2.412448  0.767308
2017-08-21  0.201304 -1.383081 -2.705714  0.173396
2017-08-22  0.324152 -1.559648  0.347646 -0.147668
2017-08-23  1.634723  1.012054 -0.620454  0.862024
2017-08-14  0.876218 -1.956112 -0.222712 -1.589815
2017-08-15 -0.761345 -0.356646 -0.275600  0.667749
>>> df.append(df1,ignore_index=True)  #df1中的两行数据会加到df中，且新产生的df会重新建立索引
           a         b         c         d
0  -0.070943 -1.476796  1.866982 -0.318673
1  -0.952919  0.141110 -0.774668  0.484142
2   0.668221 -0.844105 -0.502913 -2.099352
3  -1.219214  0.452031  0.658647 -0.125866
4  -0.545331  0.169694  0.440980  0.174810
5  -2.675465  0.817242  1.540008 -2.363680
6  -2.220453 -1.678332  2.412448  0.767308
7   0.201304 -1.383081 -2.705714  0.173396
8   0.324152 -1.559648  0.347646 -0.147668
9   1.634723  1.012054 -0.620454  0.862024
10  0.876218 -1.956112 -0.222712 -1.589815
11 -0.761345 -0.356646 -0.275600  0.667749
>>> df,append(df1,verify_integrity=True)  #会报错，因为df1的索引和df的索引冲突
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'append' is not defined

遍历数据:
>>> df
                   a         b         c         d
2017-08-14 -0.070943 -1.476796  1.866982 -0.318673
2017-08-15 -0.952919  0.141110 -0.774668  0.484142
2017-08-16  0.668221 -0.844105 -0.502913 -2.099352
2017-08-17 -1.219214  0.452031  0.658647 -0.125866
2017-08-18 -0.545331  0.169694  0.440980  0.174810
2017-08-19 -2.675465  0.817242  1.540008 -2.363680
2017-08-20 -2.220453 -1.678332  2.412448  0.767308
2017-08-21  0.201304 -1.383081 -2.705714  0.173396
2017-08-22  0.324152 -1.559648  0.347646 -0.147668
2017-08-23  1.634723  1.012054 -0.620454  0.862024
>>> for index,row in df.iterrows():  #获取每行的index,row
...     print index       #获取行的索引
...     print row.a       #根据列名获取字段   
...     print row[0]      #根据列的序号(从0开始)获取字段
... 
2017-08-14 00:00:00  #print index
-0.0709429334447     #print row.a
-0.0709429334447     #print row[0]
2017-08-15 00:00:00
-0.952919417621
-0.952919417621
2017-08-16 00:00:00
0.668221254308
0.668221254308
2017-08-17 00:00:00
-1.21921438061
-1.21921438061
2017-08-18 00:00:00
-0.545330601627
-0.545330601627
2017-08-19 00:00:00
-2.67546538664
-2.67546538664
2017-08-20 00:00:00
-2.22045299941
-2.22045299941
2017-08-21 00:00:00
0.201303948098
0.201303948098
2017-08-22 00:00:00
0.324152456695
0.324152456695
2017-08-23 00:00:00
1.63472278968
1.63472278968

查找数据:
>>> df
                   a         b         c         d
2017-08-14 -0.070943 -1.476796  1.866982 -0.318673
2017-08-15 -0.952919  0.141110 -0.774668  0.484142
2017-08-16  0.668221 -0.844105 -0.502913 -2.099352
2017-08-17 -1.219214  0.452031  0.658647 -0.125866
2017-08-18 -0.545331  0.169694  0.440980  0.174810
2017-08-19 -2.675465  0.817242  1.540008 -2.363680
2017-08-20 -2.220453 -1.678332  2.412448  0.767308
2017-08-21  0.201304 -1.383081 -2.705714  0.173396
2017-08-22  0.324152 -1.559648  0.347646 -0.147668
2017-08-23  1.634723  1.012054 -0.620454  0.862024
>>> df['a']              #按照列名获取指定的列，返回一个Series
2017-08-14   -0.070943
2017-08-15   -0.952919
2017-08-16    0.668221
2017-08-17   -1.219214
2017-08-18   -0.545331
2017-08-19   -2.675465
2017-08-20   -2.220453
2017-08-21    0.201304
2017-08-22    0.324152
2017-08-23    1.634723
Freq: D, Name: a, dtype: float64
>>> df[:2]             #获取前两行数据
                   a         b         c         d
2017-08-14 -0.070943 -1.476796  1.866982 -0.318673
2017-08-15 -0.952919  0.141110 -0.774668  0.484142
>>> df[2:5]            #获取3到5行这3行数据
                   a         b         c         d
2017-08-16  0.668221 -0.844105 -0.502913 -2.099352
2017-08-17 -1.219214  0.452031  0.658647 -0.125866
2017-08-18 -0.545331  0.169694  0.440980  0.174810
>>> df.loc['20170814']   #获取指定索引的行，返回一个Series
a   -0.070943
b   -1.476796
c    1.866982
d   -0.318673
Name: 2017-08-14 00:00:00, dtype: float64
>>> df.iloc[3]          #获取制定序号的行，第四行
a   -1.219214
b    0.452031
c    0.658647
d   -0.125866
Name: 2017-08-17 00:00:00, dtype: float64

删除数据:
del df['a'] #删除dataframe指定的列，这个是直接影响当前的dataframe，del不是函数，是Python内置语句，没有返回值
df.drop(['a'],axis=1) #删除指定的列，与del的区别是不会影响原来的dataframe，会返回一个新的dataframe
>>> df
                   a         b         c         d
2017-08-14 -0.070943 -1.476796  1.866982 -0.318673
2017-08-15 -0.952919  0.141110 -0.774668  0.484142
2017-08-16  0.668221 -0.844105 -0.502913 -2.099352
2017-08-17 -1.219214  0.452031  0.658647 -0.125866
2017-08-18 -0.545331  0.169694  0.440980  0.174810
2017-08-19 -2.675465  0.817242  1.540008 -2.363680
2017-08-20 -2.220453 -1.678332  2.412448  0.767308
2017-08-21  0.201304 -1.383081 -2.705714  0.173396
2017-08-22  0.324152 -1.559648  0.347646 -0.147668
2017-08-23  1.634723  1.012054 -0.620454  0.862024
>>> del df['a']
>>> df
                   b         c         d
2017-08-14 -1.476796  1.866982 -0.318673
2017-08-15  0.141110 -0.774668  0.484142
2017-08-16 -0.844105 -0.502913 -2.099352
2017-08-17  0.452031  0.658647 -0.125866
2017-08-18  0.169694  0.440980  0.174810
2017-08-19  0.817242  1.540008 -2.363680
2017-08-20 -1.678332  2.412448  0.767308
2017-08-21 -1.383081 -2.705714  0.173396
2017-08-22 -1.559648  0.347646 -0.147668
2017-08-23  1.012054 -0.620454  0.862024
>>> data=pd.DataFrame(np.arange(16).reshape((4,4)),index=['yang','chen','yangchen','YANGCHEN'],columns=list('abcd'))
>>> data
           a   b   c   d
yang       0   1   2   3
chen       4   5   6   7
yangchen   8   9  10  11
YANGCHEN  12  13  14  15
>>> data.drop(['yang'])  #删除指定的行，不会影响原来的dataframe
           a   b   c   d
chen       4   5   6   7
yangchen   8   9  10  11
YANGCHEN  12  13  14  15

增加列:
>>> dates=pd.date_range('20170814',periods=10)
>>> df=pd.DataFrame(np.random.randn(10,4),index=dates,columns=list('abcd'))
>>> df
                   a         b         c         d
2017-08-14 -0.322956  0.468706  0.116160 -1.341692
2017-08-15 -0.515054  0.264440 -2.161473 -0.174550
2017-08-16  0.650593 -1.950105  0.996984 -0.245048
2017-08-17  1.080525  0.725365  0.096182  0.768918
2017-08-18  1.469421 -0.256812 -1.617240  0.135067
2017-08-19 -0.603449  0.335246  0.074404  0.562276
2017-08-20  1.425723  0.362517  0.194713  1.536893
2017-08-21 -0.054211 -1.148645 -0.370300  1.788112
2017-08-22  0.906960 -0.970709  0.837467  1.483115
2017-08-23 -0.828347 -0.611065  0.690377  0.364306
>>> df['f']=pd.Series(np.random.randn(10),index=df.index)
>>> df
                   a         b         c         d         f
2017-08-14 -0.322956  0.468706  0.116160 -1.341692  1.933815
2017-08-15 -0.515054  0.264440 -2.161473 -0.174550 -0.795293
2017-08-16  0.650593 -1.950105  0.996984 -0.245048 -0.221655
2017-08-17  1.080525  0.725365  0.096182  0.768918 -0.357417
2017-08-18  1.469421 -0.256812 -1.617240  0.135067 -1.214116
2017-08-19 -0.603449  0.335246  0.074404  0.562276  0.895880
2017-08-20  1.425723  0.362517  0.194713  1.536893  1.649842
2017-08-21 -0.054211 -1.148645 -0.370300  1.788112  1.299603
2017-08-22  0.906960 -0.970709  0.837467  1.483115  2.107635
2017-08-23 -0.828347 -0.611065  0.690377  0.364306  1.022418

修改指定行或单元格数据:
df.values[i][j]=xxx #i是行号，j是列号，从0开始
df.values[i]=xxx #把指定行的数据设为同一个值，从0开始
df['j']=xxx   #把指定列的所有数据设为同一个值，如果指定的列名不存在，会新增列，可以用来插入或修改信息
>>> df
                   a         b         c         d
2017-08-14 -2.589295 -0.626701 -0.178395 -0.950705
2017-08-15 -1.266424 -0.420397  1.897739  0.229476
2017-08-16  0.822300 -0.040726 -0.155662 -1.438249
2017-08-17  0.647864  0.822973 -0.440035 -1.162249
2017-08-18  1.053494  2.154456  1.727011  0.259823
2017-08-19 -0.490237  0.052315  0.082357 -0.627084
2017-08-20 -1.704763  0.979868 -0.606690  0.210715
2017-08-21  0.638223  0.001918  0.080676  0.314104
2017-08-22  0.926974  0.206934  0.282983 -0.765806
2017-08-23  0.529972  0.395832  0.085567 -0.214170
>>> df.values[1][1]=0
>>> df
                   a         b         c         d
2017-08-14 -2.589295 -0.626701 -0.178395 -0.950705
2017-08-15 -1.266424  0.000000  1.897739  0.229476
2017-08-16  0.822300 -0.040726 -0.155662 -1.438249
2017-08-17  0.647864  0.822973 -0.440035 -1.162249
2017-08-18  1.053494  2.154456  1.727011  0.259823
2017-08-19 -0.490237  0.052315  0.082357 -0.627084
2017-08-20 -1.704763  0.979868 -0.606690  0.210715
2017-08-21  0.638223  0.001918  0.080676  0.314104
2017-08-22  0.926974  0.206934  0.282983 -0.765806
2017-08-23  0.529972  0.395832  0.085567 -0.214170
>>> df.values[1]=12
>>> df
                    a          b          c          d
2017-08-14  -2.589295  -0.626701  -0.178395  -0.950705
2017-08-15  12.000000  12.000000  12.000000  12.000000
2017-08-16   0.822300  -0.040726  -0.155662  -1.438249
2017-08-17   0.647864   0.822973  -0.440035  -1.162249
2017-08-18   1.053494   2.154456   1.727011   0.259823
2017-08-19  -0.490237   0.052315   0.082357  -0.627084
2017-08-20  -1.704763   0.979868  -0.606690   0.210715
2017-08-21   0.638223   0.001918   0.080676   0.314104
2017-08-22   0.926974   0.206934   0.282983  -0.765806
2017-08-23   0.529972   0.395832   0.085567  -0.214170
>>> df['a']=10
>>> df
             a          b          c          d
2017-08-14  10  -0.626701  -0.178395  -0.950705
2017-08-15  10  12.000000  12.000000  12.000000
2017-08-16  10  -0.040726  -0.155662  -1.438249
2017-08-17  10   0.822973  -0.440035  -1.162249
2017-08-18  10   2.154456   1.727011   0.259823
2017-08-19  10   0.052315   0.082357  -0.627084
2017-08-20  10   0.979868  -0.606690   0.210715
2017-08-21  10   0.001918   0.080676   0.314104
2017-08-22  10   0.206934   0.282983  -0.765806
2017-08-23  10   0.395832   0.085567  -0.214170
>>> df['e']=11
>>> df
             a          b          c          d   e
2017-08-14  10  -0.626701  -0.178395  -0.950705  11
2017-08-15  10  12.000000  12.000000  12.000000  11
2017-08-16  10  -0.040726  -0.155662  -1.438249  11
2017-08-17  10   0.822973  -0.440035  -1.162249  11
2017-08-18  10   2.154456   1.727011   0.259823  11
2017-08-19  10   0.052315   0.082357  -0.627084  11
2017-08-20  10   0.979868  -0.606690   0.210715  11
2017-08-21  10   0.001918   0.080676   0.314104  11
2017-08-22  10   0.206934   0.282983  -0.765806  11
2017-08-23  10   0.395832   0.085567  -0.214170  11


pandas

describe():对于数据的快速统计汇总
>>> df
                   A         B         C         D
2017-08-14  1.353028  1.185274  0.457944  1.061098
2017-08-15 -0.836108 -0.318053 -0.636783 -0.857289
2017-08-16 -0.897134 -1.130012 -0.779358 -1.436528
2017-08-17 -0.564401  0.281369  0.596840 -2.521115
2017-08-18  0.949512  1.192964 -1.332428 -1.767244
2017-08-19 -1.751588  0.751937  0.063702 -1.876896
>>> df.describe()
              A         B         C         D
count  6.000000  6.000000  6.000000  6.000000     #计数
mean  -0.291115  0.327246 -0.271680 -1.232996     #平均值
std    1.192837  0.917405  0.763595  1.249378     #标准差
min   -1.751588 -1.130012 -1.332428 -2.521115     #最小值
25%   -0.881877 -0.168197 -0.743714 -1.849483     #分位数(quantile)
50%   -0.700254  0.516653 -0.286540 -1.601886     #分位数
75%    0.571034  1.076939  0.359384 -1.002099     #分位数
max    1.353028  1.192964  0.596840  1.061098     #最大值

T；对数据转置
>>> df
                   A         B         C         D
2017-08-14  1.353028  1.185274  0.457944  1.061098
2017-08-15 -0.836108 -0.318053 -0.636783 -0.857289
2017-08-16 -0.897134 -1.130012 -0.779358 -1.436528
2017-08-17 -0.564401  0.281369  0.596840 -2.521115
2017-08-18  0.949512  1.192964 -1.332428 -1.767244
2017-08-19 -1.751588  0.751937  0.063702 -1.876896
>>> df.T
   2017-08-14  2017-08-15  2017-08-16  2017-08-17  2017-08-18  2017-08-19
A    1.353028   -0.836108   -0.897134   -0.564401    0.949512   -1.751588
B    1.185274   -0.318053   -1.130012    0.281369    1.192964    0.751937
C    0.457944   -0.636783   -0.779358    0.596840   -1.332428    0.063702
D    1.061098   -0.857289   -1.436528   -2.521115   -1.767244   -1.876896

sort_index(axis=1,ascending=False):按轴进行排序(同上按照索引排序)

缺失值处理：
在Pandas中，使用np.nan来代替缺失值，这些值将默认不会包含在计算中

reindex()：可以对指定轴上的索引进行改变/增加/删除操作
>>> df1=df.reindex(index=dates[0:4],columns=list(df.columns)+['E'])
>>> df1.loc[dates[0]:dates[1],'E']=1
>>> df1
                   A         B         C         D    E
2017-08-14  1.353028  1.185274  0.457944  1.061098  1.0
2017-08-15 -0.836108 -0.318053 -0.636783 -0.857289  1.0
2017-08-16 -0.897134 -1.130012 -0.779358 -1.436528  NaN
2017-08-17 -0.564401  0.281369  0.596840 -2.521115  NaN

dropna(how='any')：去掉包含确实值的行
>>> df1.dropna(how='any')
                   A         B         C         D    E
2017-08-14  1.353028  1.185274  0.457944  1.061098  1.0
2017-08-15 -0.836108 -0.318053 -0.636783 -0.857289  1.0

fillna():对缺失值进行填充
>>> df1.fillna(value=6)
                   A         B         C         D    E
2017-08-14  1.353028  1.185274  0.457944  1.061098  1.0
2017-08-15 -0.836108 -0.318053 -0.636783 -0.857289  1.0
2017-08-16 -0.897134 -1.130012 -0.779358 -1.436528  6.0
2017-08-17 -0.564401  0.281369  0.596840 -2.521115  6.0

isnull:对数据进行布尔填充
>>> pd.isnull(df1)
                A      B      C      D      E
2017-08-14  False  False  False  False  False
2017-08-15  False  False  False  False  False
2017-08-16  False  False  False  False   True
2017-08-17  False  False  False  False   True

分组：通常指一下一个或多个操作步骤
(Splitting):按照一些规则将数据分为不同的组
(Applying):对于每组数据数据分别执行函数
(Combing):将结果组合到一个数据结构中
>>> df=pd.DataFrame({'A':['foo','bar','foo','bar',
...                      'foo','bar','foo','foo'],
...                  'B':['one','one','two','three',
...                      'two','two','one','three'],
...                  'C':np.random.randn(8),
...                  'D':np.random.randn(8)})
>>> df
     A      B         C         D
0  foo    one  0.813764 -0.266961
1  bar    one -1.375949 -1.239825
2  foo    two -1.503418  0.512482
3  bar  three -1.018132 -0.142930
4  foo    two  0.905275  1.953935
5  bar    two  0.585079  0.782257
6  foo    one  1.601321 -1.646706
7  foo  three  0.494932  1.853338
>>> df.groupby('A').sum()
            C         D
A                      
bar -1.809002 -0.600497
foo  2.311874  2.406088
>>> df.groupby(['A','B']).sum()
                  C         D
A   B                        
bar one   -1.375949 -1.239825
    three -1.018132 -0.142930
    two    0.585079  0.782257
foo one    2.415085 -1.913667
    three  0.494932  1.853338
    two   -0.598143  2.466417









